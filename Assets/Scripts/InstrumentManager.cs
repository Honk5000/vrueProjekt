//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
using System.Linq;
public class InstrumentManager : ScriptableObject
{
	public OrchestraMidiPlayer orchestraPlayer;
	static readonly object padlock = new object();
	private static InstrumentManager manager;
	/// <summary>
	/// Maps all the instrument GameObjects to their respective instrument types, so that it's easy to retrieve all instruments of a certain type.
	/// </summary>
	private Dictionary<InstrumentType, GameObject[]> instrumentTypeMap;

	protected InstrumentManager () // don't allow instantiation of this object *from the outside*
	{
	}

	public static InstrumentManager instance
	{
		get
		{
			lock (padlock)
			{
				return ( manager ? manager : manager = InstrumentManager.CreateInstance<InstrumentManager>() );
			}
		}
	}

	private List<GameObject> _allInstruments ;
	public List<GameObject> allInstruments {
		get {
			if (_allInstruments == null) {
				_allInstruments = new List<GameObject>();

			}
			return _allInstruments;
		}

	}

	// set a common volume for all instruments
	public void setVolumeForAllInstruments(float volume) {
		Debug.Log("SETVOLUME: " + volume);
		foreach (GameObject instrument in this.allInstruments) {

			instrument.GetComponent<NetworkView>().RPC("setVolumeRPC", RPCMode.All, volume);
			//instrument.GetComponent<AudioSource>().volume = volume;

		}


	}
	public void addInstrument(GameObject instrument, InstrumentType instrumentType) {
	
	} 
	/*private void doForAllInstrumentsOfType(InstrumentType type, Action<GameObject> action) {
		foreach (GameObject instrument in instrumentTypeMap[type]) {
			
		}
	}*/
	public void setVolumeForInstrumentType(InstrumentType type, float volume) {
		if (!instrumentTypeMap.ContainsKey (type))
			return;


	}
	public void setPitchForInstrumentType(InstrumentType type, float volume) {
		if (!instrumentTypeMap.ContainsKey (type))
			return;
	}
	public void unmuteInstrumentType(InstrumentType type) {
		if (!instrumentTypeMap.ContainsKey (type))
			return;
	}
	public void muteInstrumentType (InstrumentType type) {
		if (!instrumentTypeMap.ContainsKey (type))
			return;
	}
	public void playAll() {

	}
	public void pauseAll() {

	}

}

