//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34209
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

[RequireComponent(typeof(AudioSource))]
public class InstrumentController : UserManagementObjectController
{
	private AudioSource audioSourceComponent;
	public void Start() {
		audioSourceComponent = this.GetComponent<AudioSource>();

		inputListenerScript = GameObject.Find ("InputListenerObject").GetComponent<GestureInputListener>();
	}
	public InstrumentController ()
	{
	}
	private bool _playing;
	public bool playing {
		get {
			return _playing;
		}
		set {
			_playing = value;
			if (value) {
				//startPlaying();
				networkView.RPC ("startPlayingRPC", RPCMode.All);

			}
			else {
				//stopPlaying ();
				networkView.RPC ("stopPlayingRPC", RPCMode.All);
			}
		}
	}
	
	private float pitchThreshold = 0.25f;
	private float pitchSpeed = 0.5f;
	private GestureInputListener inputListenerScript = null;
	//public float rot;

	[RPC]
	public void startPlayingRPC() {
		audioSourceComponent.Play();
		this.setAccessGrantedName ("player1");
	} 
	[RPC]
	public void stopPlayingRPC() {
		audioSourceComponent.Stop();
		this.setAccessGrantedName ("player2");
	} 

	public void Update()
	{
		if(Network.isClient && inputListenerScript.selectedViewID.Equals(networkView.viewID))
		{
			//pitch range should go from 1/3 to 3 (three times slower to three times faster)

			//change the pitch according to the SpaceMouse y Axis rotation
			GameObject sp = GameObject.Find("Spacemouse");
			if (sp == null) return;
			//rot = sp.transform.rotation.y;
			if (sp.transform.rotation.y > pitchThreshold)
			{
				//higher pitch!
				if(audioSourceComponent.pitch >= 1)
				{
					//change pitch in normal speed
					audioSourceComponent.pitch += pitchSpeed * Time.deltaTime;
				}
				else
				{
					//change pitch in 1/3 of the speed
					audioSourceComponent.pitch += pitchSpeed/3f * Time.deltaTime;
				}

				if(audioSourceComponent.pitch > 3)
					audioSourceComponent.pitch = 3;
			}
			if(sp.transform.rotation.y < -pitchThreshold)
			{
				//lower pitch!
				if(audioSourceComponent.pitch >= 1)
				{
					//change pitch in normal speed
					audioSourceComponent.pitch -= pitchSpeed * Time.deltaTime;
				}
				else
				{
					//change pitch in 1/3 of the speed
					audioSourceComponent.pitch -= pitchSpeed/3f * Time.deltaTime;
				}
				
				if(audioSourceComponent.pitch < 1f/3f)
					audioSourceComponent.pitch = 1f/3f;
			}

			//now make an RPC call to the server to send the new pitch value
			networkView.RPC ("SetPitchRPC", RPCMode.Server, audioSourceComponent.pitch);
		}
	}

	[RPC]
	public void SetPitchRPC(float pitchValue)
	{
		audioSourceComponent.pitch = pitchValue;
	}

}


